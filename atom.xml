<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://finchee.github.io</id>
    <title>Jiahui&apos;s website</title>
    <updated>2024-04-15T15:14:31.505Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://finchee.github.io"/>
    <link rel="self" href="https://finchee.github.io/atom.xml"/>
    <logo>https://finchee.github.io/images/avatar.png</logo>
    <icon>https://finchee.github.io/favicon.ico</icon>
    <rights>All rights reserved 2024, Jiahui&apos;s website</rights>
    <entry>
        <title type="html"><![CDATA[STM32 关于 Systick 的学习]]></title>
        <id>https://finchee.github.io/post/stm32-guan-yu-systick-de-xue-xi/</id>
        <link href="https://finchee.github.io/post/stm32-guan-yu-systick-de-xue-xi/">
        </link>
        <updated>2023-12-26T06:52:10.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<h2 id="systick-初始化流程">Systick 初始化流程</h2>
<pre><code class="language-mermaid">sequenceDiagram
    main.c-&gt;&gt;+stm32f4xx_hal.c: HAL_Init()
    stm32f4xx_hal.c-&gt;&gt;+stm32f4xx_hal.c: HAL_InitTick(TICK_INT_PRIORITY)
    alt (TicksNumb-1UL)超出timer的24位有效值
        stm32f4xx_hal.c-&gt;&gt;+stm32f4xx_hal_cortex.c: HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq))
        stm32f4xx_hal_cortex.c-&gt;&gt;+core_cm4.h: SysTick_Config(TicksNumb)
        core_cm4.h--&gt;&gt;-stm32f4xx_hal_cortex.c: return 1UL
        stm32f4xx_hal_cortex.c--&gt;&gt;-stm32f4xx_hal.c: return 1UL
        stm32f4xx_hal.c--&gt;&gt;+stm32f4xx_hal.c: return HAL_ERROR
    else
        core_cm4.h-&gt;&gt;+core_cm4.h: set reload register as (TicksNumb - 1UL)
        core_cm4.h-&gt;&gt;+core_cm4.h: Set Interrupt Priority
        core_cm4.h-&gt;&gt;+core_cm4.h: Load the SysTick Counter Value
        core_cm4.h-&gt;&gt;+core_cm4.h: Enable SysTick IRQ and SysTick Timer
        core_cm4.h--&gt;&gt;+stm32f4xx_hal_cortex.c: 0UL
        stm32f4xx_hal_cortex.c--&gt;&gt;-stm32f4xx_hal.c: return 0UL
        alt TickPriority不超出优先级位数(15)
            stm32f4xx_hal.c-&gt;&gt;+stm32f4xx_hal_cortex.c: HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U)
            stm32f4xx_hal_cortex.c-&gt;&gt;+core_cm4.h: NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority))
            core_cm4.h-&gt;&gt;+core_cm4.h: Set Interrupt Priority
        else
            stm32f4xx_hal_cortex.c--&gt;&gt;-stm32f4xx_hal.c: return HAL_ERROR
        end
        stm32f4xx_hal.c--&gt;&gt;+stm32f4xx_hal.c: return HAL_OK
    end
</code></pre>
<script type="module">
import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10.0.2/+esm';
mermaid.initialize({ startOnLoad: false });
await mermaid.run({
  querySelector: '.language-mermaid',
});
</script>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[借助信用卡等工具在电脑上记账]]></title>
        <id>https://finchee.github.io/post/jie-zhu-xin-yong-qia-zai-dian-nao-shang-ji-zhang/</id>
        <link href="https://finchee.github.io/post/jie-zhu-xin-yong-qia-zai-dian-nao-shang-ji-zhang/">
        </link>
        <updated>2023-12-12T04:19:17.000Z</updated>
        <summary type="html"><![CDATA[<p>通过导入每月信用卡账单记录支出情况, 了解自己的财务状况.</p>
]]></summary>
        <content type="html"><![CDATA[<p>通过导入每月信用卡账单记录支出情况, 了解自己的财务状况.</p>
<!-- more -->
<h2 id="第一步-导入账单">第一步: 导入账单</h2>
<p>根据不同银行的信用卡情况, 具体的导入方法不同.</p>
<h3 id="方法一-通过邮件直接复制数据粘贴到excel">方法一: 通过邮件直接复制数据粘贴到excel</h3>
<p>邮件中的内容可以直接复制到excel中, 复制完后整理表格开头<br>
<img src="https://finchee.github.io/post-images/1702355769761.jpg" alt="" loading="lazy"></p>
<h3 id="方法二-通过pdf导入数据到excel">方法二: 通过pdf导入数据到excel</h3>
<figure data-type="image" tabindex="1"><img src="https://finchee.github.io/post-images/1702356082998.png" alt="" loading="lazy"></figure>
<h3 id="方法三-通过手机app直接导出excel格式的数据">方法三: 通过手机APP直接导出excel格式的数据</h3>
<p>建设银行、微信账单等支持直接发送excel格式的账单.</p>
<h2 id="第二步-整理数据">第二步: 整理数据</h2>
<ol>
<li>创建一个新的 sheet</li>
<li>选择需要插入表格的单元格</li>
<li>插入数据透视表选择表格和区域<br>
<img src="https://finchee.github.io/post-images/1702890298342.png" alt="" loading="lazy"></li>
<li>选择导入数据的 sheet</li>
<li>选中导入的数据(含表头)<br>
<img src="https://finchee.github.io/post-images/1702890695016.png" alt="" loading="lazy"></li>
<li>将对应的表头拖入行和值内就能生成左侧的表格<br>
<img src="https://finchee.github.io/post-images/1702891186067.png" alt="" loading="lazy"></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[2023年度关于投资的随笔]]></title>
        <id>https://finchee.github.io/post/2023-nian-du-guan-yu-tou-zi-de-sui-bi/</id>
        <link href="https://finchee.github.io/post/2023-nian-du-guan-yu-tou-zi-de-sui-bi/">
        </link>
        <updated>2023-12-05T06:08:29.000Z</updated>
        <summary type="html"><![CDATA[<p>不能用现在已知的未来去苛责过去面对迷雾的自己.</p>
]]></summary>
        <content type="html"><![CDATA[<p>不能用现在已知的未来去苛责过去面对迷雾的自己.</p>
<!-- more -->
<p>---- 《长赢指数投资计划<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>》</p>
<hr>
<h2 id="20231205">2023/12/05</h2>
<p>强烈推荐使用信用卡作为自己的记账工具, 审视每一个分类的开销是否值得, 不需要刻意追求物美价廉, 物尽其用即是节约. <a href="https://blog.finchee.site/post/jie-zhu-xin-yong-qia-zai-dian-nao-shang-ji-zhang/">如何借助信用卡在电脑上记账, 点击这里了解.</a></p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p><a href="https://mp.weixin.qq.com/s/ovVgHIFYAboVPIXWj7nxPQ">长赢指数投资计划</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python实现根据20日平均线交易恒生科技标的的策略]]></title>
        <id>https://finchee.github.io/post/jh-swsn001_python-shi-xian-gen-ju-20-ri-ping-jun-xian-jiao-yi-heng-sheng-ke-ji-biao-de-de-ce-lue/</id>
        <link href="https://finchee.github.io/post/jh-swsn001_python-shi-xian-gen-ju-20-ri-ping-jun-xian-jiao-yi-heng-sheng-ke-ji-biao-de-de-ce-lue/">
        </link>
        <updated>2023-11-28T07:25:13.000Z</updated>
        <summary type="html"><![CDATA[<p>这是一篇通过Python实现标的交易策略的学习笔记.</p>
]]></summary>
        <content type="html"><![CDATA[<p>这是一篇通过Python实现标的交易策略的学习笔记.</p>
<!-- more -->
<p>待整理.....</p>
<script type="module">
import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10.0.2/+esm';
mermaid.initialize({ startOnLoad: false });
await mermaid.run({
  querySelector: '.language-mermaid',
});
</script>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gridea 同步问题解决方案]]></title>
        <id>https://finchee.github.io/post/gridea-tong-bu-wen-ti-jie-jue-fang-an/</id>
        <link href="https://finchee.github.io/post/gridea-tong-bu-wen-ti-jie-jue-fang-an/">
        </link>
        <updated>2023-11-03T03:33:22.000Z</updated>
        <content type="html"><![CDATA[<p>Gridea 的远程代理设置中选择 proxy, 参考 clash 填写如下内容:<br>
<img src="https://user-images.githubusercontent.com/96154468/245963743-98ffb654-8406-4d15-9df3-546b75be5956.png" alt="" loading="lazy"><br>
<img src="https://user-images.githubusercontent.com/96154468/245963879-73de2515-96e6-4bb5-82c5-6cffd7ab6be2.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[STM32 在VScode中的嵌入式开发环境搭建]]></title>
        <id>https://finchee.github.io/post/stm32-qian-ru-shi-kai-fa-huan-jing-da-jian/</id>
        <link href="https://finchee.github.io/post/stm32-qian-ru-shi-kai-fa-huan-jing-da-jian/">
        </link>
        <updated>2023-10-26T10:10:33.000Z</updated>
        <summary type="html"><![CDATA[<p>工欲善其事，必先利其器. ----《论语·卫灵公》</p>
]]></summary>
        <content type="html"><![CDATA[<p>工欲善其事，必先利其器. ----《论语·卫灵公》</p>
<!-- more -->
<h2 id="硬件环境">硬件环境</h2>
<ul>
<li><a href="http://47.111.11.73/docs/boards/stm32/zdyz_stm32f103_mini.html">STM32开发板: stm32f103-mini开发板</a></li>
<li>ST-Link 烧录器</li>
</ul>
<h2 id="软件环境">软件环境</h2>
<p>参照官网教程安装即可.</p>
<ul>
<li><a href="https://code.visualstudio.com">VScode</a></li>
<li><a href="https://www.st.com/en/development-tools/stm32cubemx.html">STM32CubeMX</a></li>
<li><a href="https://www.st.com/zh/development-tools/stm32cubeclt.html">STM32CubeCLT </a> or <a href="https://www.st.com/en/development-tools/stm32cubeide.html">STM32CubeIDE </a>(完全包含STM32CubeCLT环境, 按照后续要求配置路径即可)</li>
<li><a href="https://cmake.org/download">CMake</a></li>
<li><a href="https://git-scm.com/downloads">Git</a></li>
</ul>
<h2 id="vscode-环境配置">VScode 环境配置</h2>
<p>VScode 左侧菜单栏的扩展中搜索 <strong>STM32 VS Code Extension</strong>, 点击 Install 安装插件.<br>
<img src="https://finchee.github.io/post-images/1698660802460.png" alt="" loading="lazy"></p>
<h2 id="工程搭建">工程搭建</h2>
<p>点击位置①、位置②, 导入已有工程或新建工程. 新建的工程通过 CubeMX 进行配置, 这里不做讲解.<br>
<img src="https://finchee.github.io/post-images/1698919728190.png" alt="" loading="lazy"><br>
工程内如果找不到 STM32CubeCLT 或 STM32CubeIDE 的路径, 打开位置①工程目录 cmake 内的 gcc-arm-none-eabi.cmake 文件, 在位置②和位置③处修改.<br>
<img src="https://finchee.github.io/post-images/1698920675102.png" alt="" loading="lazy"></p>
<h2 id="build">Build</h2>
<p>首次打开工程, 可能缺少 vcpkg、cmake、ninja 环境, VScode 会自动安装, 如果报错可能是网络问题, 可以在 cvpkg 窗口内确认原因.<br>
<img src="https://finchee.github.io/post-images/1698920964236.png" alt="" loading="lazy"><br>
打开左侧插件栏 CMake, 点左侧窗口上方的 Build All Projects 按钮编译工程, 编译成功后位置③ OUTPUT 窗口提示<code>[build] 生成已完成，退出代码为 0</code>, 表示成功. 如果编译失败, 可查看 PROBLEMS 窗口中的提示信息, 修改错误后再编译, 直到[build]成功.<br>
<img src="https://finchee.github.io/post-images/1698921276777.png" alt="" loading="lazy"></p>
<h2 id="debug">Debug</h2>
<p>打开编译成功的工程, 点击菜单Run-&gt;Open Configurations; 或者点击左侧插件栏 Run and Debug(Ctrl+Shift+D) 上方 Open launch.json 图标; 或者工程目录中直接打开 .vscode\launch.json 文件, 配置如下, 我未按照原文要求修改相应的工具目录.<br>
<img src="https://finchee.github.io/post-images/1698978763068.png" alt="" loading="lazy"><br>
硬件连接ST-link通电后进行调试, 点击菜单Run-&gt;Start Debugging；或者点击左侧插件栏Run and Debug(Ctrl+Shift+D)上方Launch图标，进入Debugging。左侧窗口中可以查看寄存器、本地变更、调用栈，可在左侧栏WATCH中增加全局变量查看。窗口上方有调试按钮方便调试操作，按钮包含运行、单步、跳入、跳出、复位、停止。也可从菜单Run中点击相应菜单项或者用快捷键F5、F10、F11、shift+F11、ctrl+shift+F5、shift+F5。在源代码窗口左侧行号上点击可直接增加断点，也可在左侧栏BREAKPOINTS栏中修改。<br>
<img src="https://finchee.github.io/post-images/1698979256130.png" alt="" loading="lazy"></p>
<h2 id="验证结果">验证结果</h2>
<figure data-type="image" tabindex="1"><img src="https://finchee.github.io/post-images/1698981215984.jpg" alt="" loading="lazy"></figure>
<h2 id="感谢">感谢</h2>
<p>全文参考自<a href="https://blog.51cto.com/u_16221697/7044751?u_atoken=cbcb45a2-191b-4cc6-986e-3983e379a610&amp;u_asession=01mWGDFcKxdmZuXoK5TBY0AyY2tzYlCGudIPXc7lCvQpg2cf9M9SOFUSkeGDMt2pV_9qskbM_GYu6Oyt7oQwzkO9sq8AL43dpOnCClYrgFm6o&amp;u_asig=053WpEGOMjJshjOP0P2n9LK97RmhlHbBgNijlI27rP41uw-VjEHfXeonYF_qbFrZq_4Um7NiSJu1t7zXuUEkjMQgUdAufw1jETqhkVZcNAFf9Yu3URGs4rZS8tbZl8pcGvBE0c_77HO89-Ad8Dmjn2rtr-3Vv4g33ya9EDkLdWJsKBo4r_-g6uHazyVo7CXHcIksmHjM0JOodanL5-M1Qs1d0LeZWAILaGo5mxRYbp_LC_qI4CWk_ELXMsBTCSIgnmskI4FNQ3jYwtBwA9JZVVeltvCu2tBuplxRYVmhE_iSbY94r_LXIIil3Y3aVPRGAe&amp;u_aref=M2aPkV8%2FUZiccZaON24HaCNmWSI%3D">使用VS Code进行STM32单片机开发（创建工程、编译、调试）基于官方插件STM32 for VS Code Extension</a>, 感谢作者 sealevelrise 的贡献.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gridea 中 mermaid 的使用]]></title>
        <id>https://finchee.github.io/post/gridea-mermaid-ce-shi/</id>
        <link href="https://finchee.github.io/post/gridea-mermaid-ce-shi/">
        </link>
        <updated>2023-09-20T07:09:47.000Z</updated>
        <summary type="html"><![CDATA[<p>通过 markdown 作图.</p>
]]></summary>
        <content type="html"><![CDATA[<p>通过 markdown 作图.</p>
<!-- more -->
<h2 id="使用方法">使用方法</h2>
<p>通过添加如下内容后</p>
<pre><code>&lt;span class='mermaid'&gt;
pie title Pets adopted by volunteers
    &quot;Dogs&quot; : 386
    &quot;Cats&quot; : 85
    &quot;Rats&quot; : 15
    &lt;/span&gt;
&lt;script src=&quot;https://cdn.jsdelivr.net/npm/mermaid@10.9.0/dist/mermaid.min.js&quot;&gt;&lt;/script&gt;
</code></pre>
<p>会显示为</p>
<span class='mermaid'>
pie title Pets adopted by volunteers
    "Dogs" : 386
    "Cats" : 85
    "Rats" : 15
</span>
<script src="https://cdn.jsdelivr.net/npm/mermaid@10.9.0/dist/mermaid.min.js"></script>
<h2 id="测试其它绘图">测试其它绘图:</h2>
<p>sequence:</p>
<span class='mermaid'>
sequenceDiagram
    Alice->>+John: Hello John, how are you?
    Alice->>+John: John, can you hear me?
    John-->>-Alice: Hi Alice, I can hear you!
    John-->>-Alice: I feel great!
</span>
<script src="https://cdn.jsdelivr.net/npm/mermaid@10.9.0/dist/mermaid.min.js"></script>
<p>flowchart:</p>
<span class='mermaid'>
flowchart LR
    A[Christmas] -->|Get money| B(Go shopping)
    B --> C{Let me think}
    C -->|One| D[Laptop]
    C -->|Two| E[iPhone]
    C -->|Three| F[fa:fa-car Car]
</span>
<script src="https://cdn.jsdelivr.net/npm/mermaid@10.2.3/dist/mermaid.min.js"></script>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于 ATE 的学习笔记]]></title>
        <id>https://finchee.github.io/post/ate-zi-dong-hua-study-note-1/</id>
        <link href="https://finchee.github.io/post/ate-zi-dong-hua-study-note-1/">
        </link>
        <updated>2023-09-20T03:05:19.000Z</updated>
        <summary type="html"><![CDATA[<p>How CIM works with OI/UI.</p>
]]></summary>
        <content type="html"><![CDATA[<p>How CIM works with OI/UI.</p>
<!-- more -->
<h2 id="cim-与-oiui-关系结构图">CIM 与 OI/UI 关系结构图</h2>
<pre><code class="language-mermaid">flowchart LR
    A[CIM] --&gt;|提供测试程序版本信息| B[服务器]
    A --&gt;|控制&lt;/br&gt;提供Lotinfo.txt| C[OI 供应商]
    B --&gt;|测试程序| C
    C --&gt;|联动| D[UI]
</code></pre>
<h2 id="名词解释">名词解释</h2>
<h3 id="cim">CIM</h3>
<blockquote>
<p>CIM，Computer Integrated Manufacturing，CIM是一种组织、管理与运营企业生产的新哲理，借助计算机硬、软件，综合运用现代管理技术、制造技术、信息技术、自动化技术、系统工程技术，将企业生产全部过程中有关人、技术、经营管理三要素集成起来，并将其信息流与物流有机地集成及优化运行，从而使企业赢得市场竞争。<br>
CIMS，Computer Integrated Manufacturing System，定义为是通过计算机硬、软件，并综合运用现代管理技术、信息技术、自动化技术实现系统集成与优化的复杂系统。企业类型不同，会在CIMS的规模、组成、实现途径及运行模式等方面有所差异。 <sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p>
</blockquote>
<h3 id="stdf">STDF</h3>
<blockquote>
<p>STDF(Standard Test Data File)，即标准测试数据文件，是半导体行业芯片测试数据的存储规范，1985年由Teradyne公司发布，到目前为止已经经过了30多年的发展，已非常成熟。最新版是2007年发布的第四版本，由于其采用统一格式/规范保存着CP或FT芯片测试所能产生的所有类型的测试数据，解决了芯片测试行业不同品牌测试机所生成的测试数据格式不统一的问题，所以在半导体行业，无论是测试机供应商，还是芯片测试公司，还是芯片设计公司都非常重视且原意接受该规范，这也使该规范虽非强制性行业规范得的情况下，却成了事实上的行业规范。关于该规范的详细介绍可访问网易云课堂上的教程《STDF规范中文说明书-完整版》，该说明书完整阐述了STDF规范的每一个细节。 <sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></p>
</blockquote>
<h3 id="oi功能">OI功能</h3>
<blockquote>
<p>通过接口实现打开测试程序、检测测试程序状态、开始或结束测试、导入Lotinfo.txt内的信息到测试程序等功能.</p>
</blockquote>
<script type="module">
import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10.0.2/+esm';
mermaid.initialize({ startOnLoad: false });
await mermaid.run({
  querySelector: '.language-mermaid',
});
</script>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p><a href="https://zhuanlan.zhihu.com/p/628941028#%E4%BB%80%E4%B9%88%E6%98%AFCIM">半导体 | 芯片制造CIM系统</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn2" class="footnote-item"><p><a href="https://zhuanlan.zhihu.com/p/35485338">STDF（标准测试数据文件）综述</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello!]]></title>
        <id>https://finchee.github.io/post/hello-gridea/</id>
        <link href="https://finchee.github.io/post/hello-gridea/">
        </link>
        <updated>2023-09-19T06:05:11.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎来到我的个人网站 ！<br>
✍️  本博客使用<strong>Gridea</strong> (一个静态博客写作客户端)生成。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎来到我的个人网站 ！<br>
✍️  本博客使用<strong>Gridea</strong> (一个静态博客写作客户端)生成。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="https://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>